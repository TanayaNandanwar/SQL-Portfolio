create database casestudy1;

use casestudy1;

select * from fact;
select * from product;
select * from location;

---Display the number of states present in the LocationTable--

select count(distinct state) from location;

----How many products are of regular type?----

select count(product) from product where type = 'regular';

select count(type) from product where type='regular';

select count (*) from product where type='regular';

----How much spending has been done on marketing of product ID 1?---

select sum(marketing) from fact where productid=1;

---What is the minimum sales of a product?---

select min(sales) as min_sales from fact;

----Display the max Cost of Good Sold (COGS)----

select max(cogs) from fact;

----Display the details of the product where product type is coffee.---

select * from product where product_type = 'coffee';

----Display the details where total expenses are greater than 40.---

select * from fact where total_expenses >40;

----What is the average sales in area code 719?------

select avg(sales) from fact where area_code=719;

----Find out the total profit generated by Colorado state.---

select sum(profit) as profit from fact
join location 
on fact.area_code = location.area_code
where state = 'colorado';

---Display the average inventory for each product ID---

select productid, avg(inventory) as avg_inventory from fact group by productid;

----Display state in a sequential order in a Location Table.---

select * from location order by state;

----Display the average budget of the Product where the average budget margin should be greater than 100.---

select productid, avg(budget_margin) as avg from fact 
group by productid 
having avg(budget_margin) >100;

---What is the total sales done on date 2010-01-01?---

select sum(sales) from fact where date= '2010-01-01';

---Display the average total expense of each product ID on an individual date---

select productid, date, avg(total_expenses)as total from fact 
group by productid, date;

---Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code---

select f.date, p.productid, p.product, f.sales, f.profit, l.state, f. area_code from fact f
join product p
on f.productid=p.productid
join location l
on f.area_code=l.area_code;

---Display the rank without any gap to show the sales wise rank.---

select *, dense_rank() over (order by sales desc) as denserank from fact;

---Find the state wise profit and sales.---

select state, sum(profit) as sum, sum(sales) as salessum from fact join location on fact.area_code=location.area_code
group by state;

---Find the state wise profit and sales along with the productname.---

select product,state, sum(profit) as sum, sum(sales) as salessum from fact join location on fact.area_code=location.area_code
join product on fact.productid=product.productid
group by state,product;

---If there is an increase in sales of 5%, calculate the increasedsales.---

select sales, sales * 1.05 as increasesales from fact;

---Find the maximum profit along with the product ID and producttype.---

select max(profit) as maxprofit, p.product,p.product_type from fact f
join product p
on f.productid=p.productid
group by p.product, p.product_type;

---Create a stored procedure to fetch the result according to the product typefrom Product Table---

Create proc usp_product
@product nvarchar(100)
as
(
select * from product where product = @product
);

exec usp_product 'lemon';

---Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss---

select *, 
iif (total_expenses < 60,'profit','loss') as profitloss from fact;

---Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order.---

select date, productid,sum(sales) from fact
group by
rollup(date,productid);


---Apply union and intersection operator on the tables which consist of attribute area code.---

select area_code from fact
union 
select area_code from location;

select area_code from fact 
intersect 
select area_code from location;

---Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.---

create function fun_product_type
(@product_type nvarchar(100))
returns table 
as 
return 
(
select * from product where Product_Type = @product_type
);

select * from dbo.fun_product_type ('tea');

---Change the product type from coffee to tea where product IDis 1 andundoit---

begin transaction

update product 
set product_type = 'tea' where ProductId = 1;

select * from product;

rollback transaction;

---Display the date, product ID and sales where total expenses are between 100 to 200---

select date, productid, sales from fact 
where total_expenses between 100 and 200;

---Delete the records in the Product Table for regular type---

delete from product 
where type = 'regular';

---Display the ASCII value of the fifth character from the columnProduct.---

select *, ASCII(substring(product,5,1)) as asciivalue from Product;